{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2023-12-23T21:20:20+03:00",
    "name": "Next JS",
    "author": "kragleh@rizn.top",
    "description": "Host a Next JS application within seconds!",
    "features": null,
    "docker_images": {
        "Nodejs 20": "ghcr.io\/parkervcp\/yolks:nodejs_20",
        "Nodejs 19": "ghcr.io\/parkervcp\/yolks:nodejs_19",
        "Nodejs 18": "ghcr.io\/parkervcp\/yolks:nodejs_18"
    },
    "file_denylist": [],
    "startup": "if [ ! \"$(ls -A \/home\/container)\" ]; then echo -e \"\/home\/container is empty.\\ncloning files into repo\"; if [ -z ${GIT_BRANCH} ]; then echo -e \"cloning default branch\"; git clone ${GIT_URL} \/home\/container; else echo -e \"cloning ${GIT_BRANCH}'\"; git clone --single-branch --branch ${GIT_BRANCH} ${GIT_URL} \/home\/container; fi; else echo -e \"\/home\/container directory is not empty.\"; cd \/home\/container; if [ -d .git ]; then echo -e \".git directory exists\"; git reset --hard; git fetch origin; git checkout ${GIT_BRANCH}; git pull origin ${GIT_BRANCH}; else echo -e \"Not a git repository. Removing existing files and cloning again.\"; rm -rf \/home\/container\/* \/home\/container\/.* 2>\/dev\/null; if [ -n \"${USERNAME}\" ] && [ -n \"${ACCESS_TOKEN}\" ]; then GIT_URL=\"https:\/\/${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_URL} | cut -d\/ -f3-)\"; fi; git clone ${GIT_URL} \/home\/container; fi; fi; if [ -f \/home\/container\/package.json ]; then \/usr\/local\/bin\/npm install; fi; \/usr\/local\/bin\/npm run build; \/usr\/local\/bin\/npx next ${NODE_RUN_ENV} -p {{SERVER_PORT}}",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": \"Compiled successfully\"\r\n}",
        "logs": "{}",
        "stop": "^^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# Copied from NodeJS App Installation Script\r\n#\r\n# Server Files: \/mnt\/server\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python python-dev libtool\r\n\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_URL} != *.git ]]; then\r\n    GIT_URL=${GIT_URL%\/}  # Remove trailing slash, if any\r\n    GIT_URL=${GIT_URL}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_URL=\"https:\/\/${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_URL} | cut -d\/ -f3-)\"\r\nfi\r\n\r\n## Check if the directory is empty or not\r\nif [ ! \"$(ls -A \/mnt\/server)\" ]; then\r\n    echo -e \"\/mnt\/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${GIT_BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_URL} .\r\n    else\r\n        echo -e \"cloning ${GIT_BRANCH}'\"\r\n        git clone --single-branch --branch ${GIT_BRANCH} ${GIT_URL} .\r\n    fi\r\nelse\r\n    echo -e \"\/mnt\/server directory is not empty.\"\r\n    cd \/mnt\/server\r\n    # Check if it's a Git repository\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        # Reset the changes to avoid conflicts\r\n        git reset --hard\r\n        # Fetch the latest changes\r\n        git fetch origin\r\n        # Checkout the desired branch\r\n        git checkout ${GIT_BRANCH}\r\n        # Pull the latest changes\r\n        git pull origin ${GIT_BRANCH}\r\n    else\r\n        echo -e \"Not a git repository. Removing existing files and cloning again.\"\r\n        rm -rf \/mnt\/server\/* \/mnt\/server\/.* 2>\/dev\/null\r\n        git clone ${GIT_URL} .\r\n    fi\r\nfi\r\n\r\nif [ -f \/mnt\/server\/package.json ]; then\r\n    \/usr\/local\/bin\/npm install --production\r\nfi\r\n\r\necho -e \"install complete\"\r\nexit 0",
            "container": "node:18-bullseye-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Git Repository URL",
            "description": "Repository to clone (https:\/\/github.com\/user_name\/repo_name)",
            "env_variable": "GIT_URL",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Branch",
            "description": "Which branch to install",
            "env_variable": "GIT_BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Auto Update",
            "description": "Pull from the repository on startup",
            "env_variable": "AUTO_UPDATE",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Git Username",
            "description": "Username used to auth with git",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Access Token",
            "description": "Password used to auth with git (https:\/\/github.com\/settings\/tokens)",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Node ENV",
            "description": "NodeJS env to use in `next` command to start the deployment. The choices are usually production or dev",
            "env_variable": "NODE_RUN_ENV",
            "default_value": "dev",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:12",
            "field_type": "text"
        }
    ]
}
